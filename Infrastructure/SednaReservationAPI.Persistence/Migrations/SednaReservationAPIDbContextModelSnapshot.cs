// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SednaReservationAPI.Persistence.Contexts;

#nullable disable

namespace SednaReservationAPI.Persistence.Migrations
{
    [DbContext(typeof(SednaReservationAPIDbContext))]
    partial class SednaReservationAPIDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SednaReservationAPI.Domain.Entities.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

<<<<<<< HEAD
                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");
=======
                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");
>>>>>>> Berke

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

<<<<<<< HEAD
                    b.Property<DateTimeOffset?>("LockoutEnd")
=======
                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
>>>>>>> Berke
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("fullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("43cd88fc-c8ce-4779-b25a-ba5590211add"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "21599378-2cda-4ae1-81d5-eb0bcc19b123",
                            Email = "admin@hotmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@HOTMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEAZapsaYVJiD44KCqlzroyM6N5JwO7IjRmIy+mfTf+h5LDrgEhU52lAZV4h6qDnKWA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "admin",
                            fullName = ""
                        });
                });

            modelBuilder.Entity("SednaReservationAPI.Domain.Entities.Hotel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<int>("Star")
                        .HasColumnType("integer");

                    b.Property<int>("StarRating")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Hotels");

                    b.HasData(
                        new
                        {
<<<<<<< HEAD
                            Id = new Guid("7b8ee542-03ae-4366-9705-b4a14671ef45"),
                            Address = "1",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            Description = "Civardaki en uygun fiyatlı otel",
                            Name = "Su Hotel",
                            StarRating = 4,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("db85c5f9-6baf-4afe-9b8d-5f35ba9d84a0"),
                            Address = "2",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            Description = "Civardaki en lüks otel",
                            Name = "Ateş Hotel",
                            StarRating = 4,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("1a7c0504-27b9-48b4-a591-fdeda149ef6e"),
                            Address = "3",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            Description = "Civardaki en lüks otel",
                            Name = "Toprak Hotel",
                            StarRating = 4,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("3fdd22bd-40d4-4c6b-9ab3-84cd608ed267"),
                            Address = "4",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            Description = "Hava olmasın",
                            Name = "Tahta Hotel",
                            StarRating = 4,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
=======
                            Id = new Guid("caae5206-29f3-4927-972d-247a5df1a9c4"),
                            Address = "1",
                            Deleted = false,
                            Description = "Civardaki en uygun fiyatlı otel",
                            Name = "Su Hotel",
                            Star = 5,
                            StarRating = 4
                        },
                        new
                        {
                            Id = new Guid("4bddd8b8-996a-4259-a677-b1ac921ebe2d"),
                            Address = "2",
                            Deleted = false,
                            Description = "Civardaki en lüks otel",
                            Name = "Ateş Hotel",
                            Star = 3,
                            StarRating = 4
                        },
                        new
                        {
                            Id = new Guid("bfec656a-1e4d-456f-8f11-8c8590331b04"),
                            Address = "3",
                            Deleted = false,
                            Description = "Civardaki en lüks otel",
                            Name = "Toprak Hotel",
                            Star = 3,
                            StarRating = 4
                        },
                        new
                        {
                            Id = new Guid("043a1ff9-91c1-4fcc-b81d-98dd822ebe50"),
                            Address = "4",
                            Deleted = false,
                            Description = "Hava olmasın",
                            Name = "Tahta Hotel",
                            Star = 3,
                            StarRating = 4
>>>>>>> Berke
                        });
                });

            modelBuilder.Entity("SednaReservationAPI.Domain.Entities.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("text");

<<<<<<< HEAD
                    b.Property<Guid>("ReservationId")
                        .HasColumnType("uuid");
=======
                    b.Property<string>("ReservationId")
                        .IsRequired()
                        .HasColumnType("text");
>>>>>>> Berke

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Payments");

                    b.HasData(
                        new
                        {
<<<<<<< HEAD
                            Id = new Guid("de21bb17-2592-4881-89b8-b2154d855d64"),
                            Amount = 7500m,
                            CreatedAt = new DateTime(2024, 7, 5, 19, 1, 3, 353, DateTimeKind.Utc).AddTicks(6723),
                            Date = new DateTime(2024, 7, 6, 11, 0, 0, 0, DateTimeKind.Utc),
                            Deleted = false,
                            PaymentMethod = "Online",
                            ReservationId = new Guid("214d0ec2-9b86-4233-8d69-221917ea8c39"),
                            Status = "Dolu",
                            UpdatedAt = new DateTime(2024, 7, 6, 11, 0, 0, 0, DateTimeKind.Utc)
=======
                            Id = new Guid("938e7234-c1c5-456c-b42a-95cd55690989"),
                            Amount = 7500m,
                            CreatedDate = new DateTime(2024, 7, 10, 6, 42, 37, 814, DateTimeKind.Utc).AddTicks(9215),
                            Date = new DateTime(2024, 7, 6, 11, 0, 0, 0, DateTimeKind.Utc),
                            Deleted = false,
                            PaymentMethod = "Online",
                            ReservationId = "asdsadasd",
                            Status = "Dolu",
                            UpdatedDate = new DateTime(2024, 7, 6, 11, 0, 0, 0, DateTimeKind.Utc)
>>>>>>> Berke
                        });
                });

            modelBuilder.Entity("SednaReservationAPI.Domain.Entities.Reservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CheckIn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CheckOut")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

<<<<<<< HEAD
                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");
=======
                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RoomId")
                        .HasColumnType("text");
>>>>>>> Berke

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

<<<<<<< HEAD
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");
=======
                    b.Property<string>("UserId")
                        .HasColumnType("text");
>>>>>>> Berke

                    b.HasKey("Id");

                    b.ToTable("Reservations");

                    b.HasData(
                        new
                        {
<<<<<<< HEAD
                            Id = new Guid("838a8721-3178-4006-8051-6183a9028ca6"),
                            CheckIn = new DateTime(2024, 7, 5, 19, 1, 3, 353, DateTimeKind.Utc).AddTicks(6618),
                            CheckOut = new DateTime(2024, 7, 6, 11, 0, 0, 0, DateTimeKind.Utc),
                            CreatedAt = new DateTime(2024, 7, 5, 19, 1, 3, 353, DateTimeKind.Utc).AddTicks(6632),
                            Deleted = false,
                            RoomId = new Guid("d4deeaf4-98bb-4729-8d6c-3a1f07762f74"),
                            Status = "Dolu",
                            TotalPrice = 5000m,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("43cd88fc-c8ce-4779-b25a-ba5590211add")
                        },
                        new
                        {
                            Id = new Guid("37d88abd-52c5-47c5-b617-3e56842faed4"),
                            CheckIn = new DateTime(2024, 7, 5, 19, 1, 3, 353, DateTimeKind.Utc).AddTicks(6639),
                            CheckOut = new DateTime(2024, 7, 5, 11, 0, 0, 0, DateTimeKind.Utc),
                            CreatedAt = new DateTime(2024, 7, 5, 19, 1, 3, 353, DateTimeKind.Utc).AddTicks(6640),
                            Deleted = false,
                            RoomId = new Guid("ab5c2b5a-602d-4c19-8ff0-dcc6912a53ea"),
                            Status = "Dolu",
                            TotalPrice = 7500m,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("43cd88fc-c8ce-4779-b25a-ba5590211add")
                        },
                        new
                        {
                            Id = new Guid("b9586960-19df-4ab7-89f4-27027b1bc5b3"),
                            CheckIn = new DateTime(2024, 7, 5, 19, 1, 3, 353, DateTimeKind.Utc).AddTicks(6644),
                            CheckOut = new DateTime(2024, 8, 5, 11, 0, 0, 0, DateTimeKind.Utc),
                            CreatedAt = new DateTime(2024, 7, 5, 19, 1, 3, 353, DateTimeKind.Utc).AddTicks(6645),
                            Deleted = false,
                            RoomId = new Guid("7fe6557e-a96b-4eed-9a71-4413e0af083f"),
                            Status = "Dolu",
                            TotalPrice = 8000m,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("43cd88fc-c8ce-4779-b25a-ba5590211add")
=======
                            Id = new Guid("28f239cf-26c1-4dab-bd42-4b3dd8778209"),
                            CheckIn = new DateTime(2024, 7, 10, 6, 42, 37, 814, DateTimeKind.Utc).AddTicks(9131),
                            CheckOut = new DateTime(2024, 7, 6, 11, 0, 0, 0, DateTimeKind.Utc),
                            CreatedDate = new DateTime(2024, 7, 10, 6, 42, 37, 814, DateTimeKind.Utc).AddTicks(9137),
                            Deleted = false,
                            RoomId = "asdasdasdsa",
                            Status = "Dolu",
                            TotalPrice = 5000m,
                            UserId = "asdasdasdsa"
                        },
                        new
                        {
                            Id = new Guid("dd0cd34f-a42b-4249-9668-a9b3d820023a"),
                            CheckIn = new DateTime(2024, 7, 10, 6, 42, 37, 814, DateTimeKind.Utc).AddTicks(9142),
                            CheckOut = new DateTime(2024, 7, 5, 11, 0, 0, 0, DateTimeKind.Utc),
                            CreatedDate = new DateTime(2024, 7, 10, 6, 42, 37, 814, DateTimeKind.Utc).AddTicks(9143),
                            Deleted = false,
                            RoomId = "asdasdasdsa",
                            Status = "Dolu",
                            TotalPrice = 7500m,
                            UserId = "asdasdasdsa"
                        },
                        new
                        {
                            Id = new Guid("99ca61e6-3320-4600-b218-9d0a559a8ff2"),
                            CheckIn = new DateTime(2024, 7, 10, 6, 42, 37, 814, DateTimeKind.Utc).AddTicks(9148),
                            CheckOut = new DateTime(2024, 8, 5, 11, 0, 0, 0, DateTimeKind.Utc),
                            CreatedDate = new DateTime(2024, 7, 10, 6, 42, 37, 814, DateTimeKind.Utc).AddTicks(9148),
                            Deleted = false,
                            RoomId = "asdasdasdsa",
                            Status = "Dolu",
                            TotalPrice = 8000m,
                            UserId = "asdasdasdsa"
>>>>>>> Berke
                        });
                });

            modelBuilder.Entity("SednaReservationAPI.Domain.Entities.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("HotelId")
                        .HasColumnType("uuid");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("SednaReservationAPI.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("SednaReservationAPI.Domain.Entities.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

<<<<<<< HEAD
                    b.Property<Guid>("HotelId")
                        .HasColumnType("uuid");
=======
                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");
>>>>>>> Berke

                    b.Property<string>("HotelId")
                        .HasColumnType("text");

                    b.Property<string>("RoomTypeId")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
<<<<<<< HEAD
                            Id = new Guid("27923c5b-9b89-4924-b9dc-3d50177e4198"),
                            BasePrice = 3500m,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            HotelId = new Guid("cba14e2a-f0be-4cc7-93ca-352230ebe3e2"),
                            RoomTypeId = 1,
                            Status = "Aktif",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("6b79c014-a55a-4c1b-835a-662f68401de8"),
                            BasePrice = 3500m,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            HotelId = new Guid("6f35677a-4545-45f1-a370-7e88892d8471"),
                            RoomTypeId = 2,
                            Status = "Boş",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("13534a61-2f8a-4232-9742-13ed7e0592bf"),
                            BasePrice = 3500m,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            HotelId = new Guid("3a042030-23a0-4677-bb6b-d2a9ac232317"),
                            RoomTypeId = 2,
                            Status = "Boş",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("45c9c095-3cac-4353-8a75-3de29b7390bd"),
                            BasePrice = 3500m,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            HotelId = new Guid("9adc6b2c-4217-43f4-a4db-6f01bb6ab3a2"),
                            RoomTypeId = 1,
                            Status = "Boş",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
=======
                            Id = new Guid("d59e3f10-d26e-4822-abec-4c06c14c542c"),
                            BasePrice = 3500m,
                            Deleted = false,
                            HotelId = "asdasdasdsa",
                            RoomTypeId = "asdasdasdsa",
                            Status = "Aktif"
                        },
                        new
                        {
                            Id = new Guid("1bd11778-a1a0-4d14-8bca-2e9fac5b7759"),
                            BasePrice = 3500m,
                            Deleted = false,
                            HotelId = "asdasdasdsa",
                            RoomTypeId = "asdasdasdsa",
                            Status = "Boş"
                        },
                        new
                        {
                            Id = new Guid("0b78fc75-d8fd-47fc-a5fc-8f3eba38ecf6"),
                            BasePrice = 3500m,
                            Deleted = false,
                            HotelId = "asdasdasdsa",
                            RoomTypeId = "asdasdasdsa",
                            Status = "Boş"
                        },
                        new
                        {
                            Id = new Guid("9834a325-2a8e-44d0-9c1f-e3327fac0585"),
                            BasePrice = 3500m,
                            Deleted = false,
                            HotelId = "asdasdasdsa",
                            RoomTypeId = "asdasdasdsa",
                            Status = "Boş"
>>>>>>> Berke
                        });
                });

            modelBuilder.Entity("SednaReservationAPI.Domain.Entities.RoomType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

<<<<<<< HEAD
                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));
=======
                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");
>>>>>>> Berke

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

<<<<<<< HEAD
=======
                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

>>>>>>> Berke
                    b.HasKey("Id");

                    b.ToTable("RoomTypes");

                    b.HasData(
                        new
                        {
<<<<<<< HEAD
                            Id = 1,
=======
                            Id = new Guid("ef9629f3-8a81-461a-8731-bfbe8cacdf10"),
                            Deleted = false,
>>>>>>> Berke
                            Description = "Tek kişilik oda",
                            Name = "Tek Kişilik"
                        },
                        new
                        {
<<<<<<< HEAD
                            Id = 2,
=======
                            Id = new Guid("21db6c78-1900-40c6-b52b-c1b049019a61"),
                            Deleted = false,
>>>>>>> Berke
                            Description = "İki kişilik oda",
                            Name = "İki Kişilik"
                        },
                        new
                        {
<<<<<<< HEAD
                            Id = 3,
                            Description = "Üç kişilik oda",
                            Name = "Üç Kişilik"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("SednaReservationAPI.Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("SednaReservationAPI.Domain.Entities.Customer", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("SednaReservationAPI.Domain.Entities.Customer", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("SednaReservationAPI.Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SednaReservationAPI.Domain.Entities.Customer", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("SednaReservationAPI.Domain.Entities.Customer", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
=======
                            Id = new Guid("40b78c63-8689-4bc0-a43a-961b4f5dd20d"),
                            Deleted = false,
                            Description = "Üç kişilik oda",
                            Name = "Üç Kişilik"
                        });
>>>>>>> Berke
                });
#pragma warning restore 612, 618
        }
    }
}
